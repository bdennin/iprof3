#undef UNICODE

#include <atomic>
#include <chrono>
#include <iostream>
#include <map>
#include <mutex>
#include <sstream>
#include <thread>
#include <vector>

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>

// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")

#define DEBUG 0
#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "44444"

static uint32_t Split(std::string& message, std::vector<std::string>& tokens, const char delineator = ' ')
{
	std::istringstream iss(message);
	std::string token;
	uint32_t count = 0;

	while(std::getline(iss, token, delineator))
	{
		tokens.push_back(token);
		count++;
	}

	return count;
}

class client
{
public:
	// Forward declaration
	struct client_data;

	client(char* p_name)
		: m_name(p_name)
		, m_p_self(nullptr)
		, m_socket(INVALID_SOCKET)
	{
		if(init_socket() < 0)
		{
			std::cout << "Error creating socket!\n";
		}

		m_p_self = &m_clients[m_name];
	}

	~client()
	{
		if(INVALID_SOCKET != m_socket)
		{
			shutdown(m_socket, SD_SEND);
			closesocket(m_socket);
			WSACleanup();
		}
	}

	int32_t init_socket()
	{
		int32_t ret;

		struct addrinfo *result = NULL;
		struct addrinfo hints;

		// Initialize Winsock
		if(0 != WSAStartup(MAKEWORD(2, 2), &m_wsa))
		{
			std::cout << "WSAStartup failed with error: " << ret << std::endl;
			return -1;
		}

		ZeroMemory(&hints, sizeof(hints));
		hints.ai_family = AF_INET;
		hints.ai_socktype = SOCK_STREAM;
		hints.ai_protocol = IPPROTO_TCP;
		hints.ai_flags = AI_PASSIVE;

		// Resolve the server address and port
		ret = getaddrinfo("127.0.0.1", DEFAULT_PORT, &hints, &result);
		if(0 != ret)
		{
			std::cout << "getaddrinfo failed with error: " << ret << std::endl;
			return -1;
		}

		// Attempt to connect to an address until one succeeds
		for(auto it = result; it != NULL; it = it->ai_next)
		{
			// Create a SOCKET for connecting to server
			m_socket = socket(it->ai_family, it->ai_socktype, it->ai_protocol);
			if(INVALID_SOCKET == m_socket)
			{
				return -1;
			}

			// Connect to server.
			if(SOCKET_ERROR == connect(m_socket, it->ai_addr, static_cast<int32_t>(it->ai_addrlen)))
			{
				closesocket(m_socket);
				m_socket = INVALID_SOCKET;
				continue; // Try next 
			}

			break;
		}

		if(INVALID_SOCKET == m_socket)
		{
			return -1;
		}

		return 0;
	}

	void iterate()
	{
#define BUF_SIZE 4096
		char buf[BUF_SIZE];
		int32_t len = 0;

		if(INVALID_SOCKET != m_socket)
		{
			// Receive from server
			len = recv(m_socket, buf, 4096, 0);

			std::string packets(buf, len);
			std::vector<std::string> messages;
			std::string message;
			std::vector<std::string> fields;

			Split(packets, messages, '|');

			for(auto it = messages.begin(); it != messages.end(); it++)
			{
				Split(message, fields, ' ');

				// Parse received
				switch(fields.size())
				{
				case 15:
				{
					client_data& client = m_clients[fields[0]];

					client.spawn_id = std::stoi(fields[1]);
					client.zone_id = std::stoi(fields[2]);
					client.heading = std::stoi(fields[3]);
					client.angle = std::stoi(fields[4]);
					client.x = std::stoi(fields[5]);
					client.y = std::stoi(fields[6]);
					client.z = std::stoi(fields[7]);
					client.hp_current = std::stoi(fields[8]);
					client.hp_max = std::stoi(fields[9]);
					client.mp_current = std::stoi(fields[10]);
					client.mp_max = std::stoi(fields[11]);
					client.aggro = std::stoi(fields[12]);
					client.level = std::stoi(fields[13]);
					client.zoning = std::stoi(fields[14]);

					break;
				}	
				default:

#ifdef DEBUG
					std::cout << "Received invalid message containing "
						<< fields.size()
						<< " fields: "
						<< message << std::endl;
#endif
					break;
				}
			}
			
			len = snprintf(buf, BUF_SIZE, "|%s %hu %hu %hd %hd %ld %ld %ld %ld %ld %ld %ld %ld %hhu %hhu",
									   m_p_self->name,
									   m_p_self->spawn_id,
									   m_p_self->zone_id,
									   m_p_self->heading,
									   m_p_self->angle,
									   m_p_self->x,
									   m_p_self->y,
									   m_p_self->z,
									   m_p_self->hp_current,
									   m_p_self->hp_max,
									   m_p_self->mp_current,
									   m_p_self->mp_max,
									   m_p_self->aggro,
									   m_p_self->level,
									   m_p_self->zoning);
			
			send(m_socket, buf, len, 0);
		}	
	}

private:
	SOCKET m_socket;
	WSAData m_wsa;
	client_data* m_p_self;
	std::string m_name;
	std::mutex m_mutex;
	std::map<std::string, client_data> m_clients;

	struct client_data
	{
		char name[16];
		uint16_t spawn_id;  // 2
		uint16_t zone_id;   // 2
		int16_t heading; // 2
		int16_t angle; // 2
		int32_t x;  // 4
		int32_t y;  // 4
		int32_t z; // 4
		int32_t hp_current; // 4
		int32_t hp_max; // 4
		int32_t mp_current; // 4
		int32_t mp_max; // 4
		int32_t aggro; // 4
		uint8_t level; // 1
		uint8_t zoning; // 1
	};
};

//#define WIN32_LEAN_AND_MEAN
//
//#include <windows.h>
//#include <winsock2.h>
//#include <ws2tcpip.h>
//#include <stdlib.h>
//#include <stdio.h>
//
//
//// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
//#pragma comment (lib, "Ws2_32.lib")
//#pragma comment (lib, "Mswsock.lib")
//#pragma comment (lib, "AdvApi32.lib")
//
//
//#define DEFAULT_BUFLEN 512
//#define DEFAULT_PORT "27015"
//
//int __cdecl main(int argc, char **argv)
//{
//	WSADATA wsaData;
//	SOCKET ConnectSocket = INVALID_SOCKET;
//	struct addrinfo *result = NULL,
//		*ptr = NULL,
//		hints;
//	const char *sendbuf = "this is a test";
//	char recvbuf[DEFAULT_BUFLEN];
//	int iResult;
//	int recvbuflen = DEFAULT_BUFLEN;
//
//	// Validate the parameters
//	if(argc != 2)
//	{
//		printf("usage: %s server-name\n", argv[0]);
//
//		return 1;
//	}
//
//	// Initialize Winsock
//	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
//	if(iResult != 0)
//	{
//		printf("WSAStartup failed with error: %d\n", iResult);
//
//		return 1;
//	}
//
//	ZeroMemory(&hints, sizeof(hints));
//	hints.ai_family = AF_UNSPEC;
//	hints.ai_socktype = SOCK_STREAM;
//	hints.ai_protocol = IPPROTO_TCP;
//
//	// Resolve the server address and port
//	iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
//	if(iResult != 0)
//	{
//		printf("getaddrinfo failed with error: %d\n", iResult);
//		WSACleanup();
//
//		return 1;
//	}
//
//	// Attempt to connect to an address until one succeeds
//	for(ptr = result; ptr != NULL; ptr = ptr->ai_next)
//	{
//
//		// Create a SOCKET for connecting to server
//		ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype,
//							   ptr->ai_protocol);
//		if(ConnectSocket == INVALID_SOCKET)
//		{
//			printf("socket failed with error: %ld\n", WSAGetLastError());
//			WSACleanup();
//
//			return 1;
//		}
//
//		// Connect to server.
//		iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
//		if(iResult == SOCKET_ERROR)
//		{
//			closesocket(ConnectSocket);
//			ConnectSocket = INVALID_SOCKET;
//			continue;
//		}
//		break;
//	}
//
//	freeaddrinfo(result);
//
//	if(ConnectSocket == INVALID_SOCKET)
//	{
//		printf("Unable to connect to server!\n");
//		WSACleanup();
//
//		return 1;
//	}
//
//	// Send an initial buffer
//	iResult = send(ConnectSocket, sendbuf, (int)strlen(sendbuf), 0);
//	if(iResult == SOCKET_ERROR)
//	{
//		printf("send failed with error: %d\n", WSAGetLastError());
//		closesocket(ConnectSocket);
//		WSACleanup();
//
//		return 1;
//	}
//
//	printf("Bytes Sent: %ld\n", iResult);
//
//	// shutdown the connection since no more data will be sent
//	iResult = shutdown(ConnectSocket, SD_SEND);
//	if(iResult == SOCKET_ERROR)
//	{
//		printf("shutdown failed with error: %d\n", WSAGetLastError());
//		closesocket(ConnectSocket);
//		WSACleanup();
//
//		return 1;
//	}
//
//	// Receive until the peer closes the connection
//	do
//	{
//
//		iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);
//		if(iResult > 0)
//			printf("Bytes received: %d\n", iResult);
//		else if(iResult == 0)
//			printf("Connection closed\n");
//		else
//			printf("recv failed with error: %d\n", WSAGetLastError());
//
//	} while(iResult > 0);
//
//	// cleanup
//	closesocket(ConnectSocket);
//	WSACleanup();
//
//	return 0;
//}
