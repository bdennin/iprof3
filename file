#undef UNICODE


#include <atomic>
#include <chrono>
#include <iostream>
#include <map>
#include <mutex>
#include <sstream>
#include <thread>
#include <vector>

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>

// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
// #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "44444"

//
//int __cdecl main(void)
//{
//    
//    // Receive until the peer shuts down the connection
//    do
//    {
//
//        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
//        if(iResult > 0)
//        {
//            printf("Bytes received: %d\n", iResult);
//
//            // Echo the buffer back to the sender
//            iSendResult = send(ClientSocket, recvbuf, iResult, 0);
//            if(iSendResult == SOCKET_ERROR)
//            {
//                printf("send failed with error: %d\n", WSAGetLastError());
//                closesocket(ClientSocket);
//                WSACleanup();
//                return 1;
//            }
//            printf("Bytes sent: %d\n", iSendResult);
//        }
//        else if(iResult == 0)
//            printf("Connection closing...\n");
//        else
//        {
//            printf("recv failed with error: %d\n", WSAGetLastError());
//            closesocket(ClientSocket);
//            WSACleanup();
//            return 1;
//        }
//
//    } while(iResult > 0);
//
//    // shutdown the connection since we're done
//    iResult = shutdown(ClientSocket, SD_SEND);
//    if(iResult == SOCKET_ERROR)
//    {
//        printf("shutdown failed with error: %d\n", WSAGetLastError());
//        closesocket(ClientSocket);
//        WSACleanup();
//        return 1;
//    }
//
//    // cleanup
//    closesocket(ClientSocket);
//    WSACleanup();
//
//    return 0;
//}
//
//void SendThread()
//{
//    while(true)
//    {
//        // Accept a client socket
//        ClientSocket = accept(ListenSocket, NULL, NULL);
//        if(ClientSocket != INVALID_SOCKET)
//        {
//            m_clients.push_back(ClientSocket);
//        }
//        else
//        {
//            printf("accept failed with error: %d\n", WSAGetLastError());
//        }
//
//        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
//
//        for(auto xit = m_clients.begin(); xit != m_clients.end(); xit++)
//        {
//            seralized = { 0 };
//            snprintf(serialized, "%s|%ld", xit->second->name, ->second->aggro);
//
//            for(auto yit = m_clients.begin(); yit != m_clients.end(); yit++)
//            {
//                send();
//            }
//        }
//    }
//}

inline size_t Split(std::string& message, std::vector<std::string>& tokens, const char delineator = ' ')
{
    std::istringstream iss(message);
    std::string token;
    uint32_t count = 0;

    while(std::getline(iss, token, delineator))
    {
        tokens.push_back(token);
        count++;
    }

    return count;
}

class server
{
public:
    server()
        : m_socket(INVALID_SOCKET)
        , m_is_running(false)
        , m_p_send_thread(nullptr)
        , m_p_recv_thread(nullptr)
    {
        if(init_socket() < 0)
        {
            std::cout << "Error creating socket!\n";
        }

        m_is_running = true;

        m_p_recv_thread = new std::thread(&server::recv_thread, this);
        m_p_send_thread = new std::thread(&server::send_thread, this);
    }

    ~server()
    {
        m_is_running = false;

        m_p_send_thread->join();
        m_p_recv_thread->join();

        delete m_p_send_thread;
        delete m_p_recv_thread;

        closesocket(m_socket);
        WSACleanup();
    }

    bool is_running()
    {
        return m_is_running;
    }

    int32_t init_socket()
    {
        int32_t ret;

        struct addrinfo *result = NULL;
        struct addrinfo hints;

        // Initialize Winsock
        ret = WSAStartup(MAKEWORD(2, 2), &m_wsa);
        if(0 != ret)
        {
            std::cout << "WSAStartup failed with error: " << ret << std::endl;
            return -1;
        }

        ZeroMemory(&hints, sizeof(hints));
        hints.ai_family = AF_INET;
        hints.ai_socktype = SOCK_STREAM;
        hints.ai_protocol = IPPROTO_TCP;
        hints.ai_flags = AI_PASSIVE;

        // Resolve the server address and port
        ret = getaddrinfo(NULL, DEFAULT_PORT, &hints, &result);
        if(0 != ret)
        {
            std::cout << "getaddrinfo failed with error: " << ret << std::endl;
            WSACleanup();
            return -1;
        }

        // Create a SOCKET for connecting to server
        m_socket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
        if(INVALID_SOCKET == m_socket)
        {
            std::cout << "socket failed with error: " << WSAGetLastError() << std::endl;
            freeaddrinfo(result);
            WSACleanup();
            return -1;
        }

        // Setup the TCP listening socket
        ret = bind(m_socket, result->ai_addr, (int)result->ai_addrlen);
        if(SOCKET_ERROR == ret)
        {
            std::cout << "bind failed with error: " << WSAGetLastError() << std::endl;
            freeaddrinfo(result);
            closesocket(m_socket);
            WSACleanup();
            return -1;
        }

        freeaddrinfo(result);

        ret = listen(m_socket, SOMAXCONN);
        if(SOCKET_ERROR == ret)
        {
            std::cout << "listen failed with error: " << WSAGetLastError() << std::endl;
            closesocket(m_socket);
            WSACleanup();
            return -1;
        }

        return 0;
    }


    void recv_thread()
    {
        const auto recv_delay_ms = std::chrono::milliseconds(50);

#define BUF_SIZE 4096

        char buf[BUF_SIZE];
        int32_t len = 0;
        SOCKET addr = -1;

        while(m_is_running)
        {
            std::cout << "running recv\n";
            std::this_thread::sleep_for(recv_delay_ms);

            len = recv(addr, buf, BUF_SIZE, 0);

            if(INVALID_SOCKET != addr && len > 0)
            {
                std::string message(buf, len);
                std::vector<std::string> tokens;

                Split(message, tokens);

                m_mutex.lock();

                client_data* p_client = m_clients[&addr];

                if(tokens.size() >= 15)
                {
                    strcpy_s(p_client->name, tokens[0].c_str());

                    p_client->spawn_id = std::stoi(tokens[1]);
                    p_client->zone_id = std::stoi(tokens[2]);
                    p_client->heading = std::stoi(tokens[3]);
                    p_client->angle = std::stoi(tokens[4]);
                    p_client->x = std::stoi(tokens[5]);
                    p_client->y = std::stoi(tokens[6]);
                    p_client->z = std::stoi(tokens[7]);
                    p_client->hp_current = std::stoi(tokens[8]);
                    p_client->hp_max = std::stoi(tokens[9]);
                    p_client->mp_current = std::stoi(tokens[10]);
                    p_client->mp_max = std::stoi(tokens[11]);
                    p_client->aggro = std::stoi(tokens[12]);
                    p_client->level = std::stoi(tokens[13]);
                    p_client->zoning = std::stoi(tokens[14]);
                }

                m_mutex.unlock();
            }
        }
    }

    void send_thread()
    {
        const auto send_delay_ms = std::chrono::milliseconds(100);

#define BUF_SIZE 4096

        char buf[BUF_SIZE];
        int32_t len = 0;

        while(m_is_running)
        {
            std::cout << "running send\n";
            std::this_thread::sleep_for(send_delay_ms);

            m_mutex.lock();

            for(auto it = m_clients.begin(); it != m_clients.end(); it++)
            {
                SOCKET* p_sock = it->first;
                client_data* p_client = it->second;

                if(nullptr != p_sock && nullptr != p_client)
                {
                    len = snprintf(buf, BUF_SIZE, "%s %hu %hu %hd %hd %ld %ld %ld %ld %ld %ld %ld %ld %hhu %hhu",
                                   p_client->name,
                                   p_client->spawn_id,
                                   p_client->zone_id,
                                   p_client->heading,
                                   p_client->angle,
                                   p_client->x,
                                   p_client->y,
                                   p_client->z,
                                   p_client->hp_current,
                                   p_client->hp_max,
                                   p_client->mp_current,
                                   p_client->mp_max,
                                   p_client->aggro,
                                   p_client->level,
                                   p_client->zoning);

                    send(*p_sock, buf, len, 0);
                }
            }

            m_mutex.unlock();
        }
    }

private:

    struct client_data
    {
        char name[16];
        uint16_t spawn_id;  // 2
        uint16_t zone_id;   // 2
        int16_t heading; // 2
        int16_t angle; // 2
        int32_t x;  // 4
        int32_t y;  // 4
        int32_t z; // 4
        int32_t hp_current; // 4
        int32_t hp_max; // 4
        int32_t mp_current; // 4
        int32_t mp_max; // 4
        int32_t aggro; // 4
        uint8_t level; // 1
        uint8_t zoning;
    };

    std::atomic<bool> m_is_running;
    std::thread* m_p_send_thread;
    std::thread* m_p_recv_thread;
    std::mutex m_mutex;
    SOCKET m_socket;
    WSAData m_wsa;
    std::map<SOCKET*, client_data*> m_clients;
};

int main()
{
    server serv;

    while(serv.is_running())
    {
        Sleep(500);
    }
}

